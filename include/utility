#pragma once

#include <bits/swap.hpp>
#include <type_traits>

namespace std {

/*************/
/* Functions */
/*************/

template<class T>
constexpr T&& forward(remove_reference_t<T>& t) noexcept;

template<class T>
constexpr std::remove_reference_t<T>&& move(T&& t) noexcept;

template<class T1, class T2>
struct pair {
using first_type  = T1;
using second_type = T2;

T1 first;
T2 second;

pair(const pair&) = default;
pair(pair&&) = default;
};

/********/
/* Tags */
/********/

struct in_place_t { explicit in_place_t() = default; };

inline constexpr in_place_t in_place {};
 
template<class T>
struct in_place_type_t { explicit in_place_type_t() = default; };

template<class T>
constexpr in_place_type_t<T> in_place_type {};

template<size_t I>
struct in_place_index_t { explicit in_place_index_t() = default; };

template<size_t I>
constexpr in_place_index_t<I> in_place_index {};

}
