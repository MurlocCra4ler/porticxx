#pragma once

#include <bits/locale/locale.hpp>
#include <bits/locale/ctype_base.hpp>
#include <bits/locale/ctype.hpp>

namespace std {

template<class Facet>
const Facet& use_facet(const std::locale& loc) {
    static Facet* f = new Facet;
    return *f;
}

template<class CharT>
CharT toupper(CharT ch, const std::locale& loc) {
    return std::use_facet<std::ctype<CharT>>(loc).toupper(ch);
}

template<class CharT>
CharT tolower(CharT ch, const std::locale& loc) {
    return std::use_facet<std::ctype<CharT>>(loc).tolower(ch);
}

template<class CharT>
bool isspace(CharT ch, const std::locale& loc) {
    return std::use_facet<std::ctype<CharT>>(loc).is(std::ctype_base::space, ch);
}

}