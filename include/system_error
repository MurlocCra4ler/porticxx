#pragma once

#include <bits/string/basic_string.hpp>
#include <stdexcept>

namespace std {

class error_category {};

class error_code {
public:
    // constructors
    error_code() noexcept;
    error_code(int val, const error_category& cat) noexcept;
    template<class ErrorCodeEnum>
    error_code(ErrorCodeEnum e) noexcept;
};

class system_error : public runtime_error {
public:
    system_error(error_code ec, const string& what_arg);
    system_error(error_code ec, const char* what_arg);
    system_error(error_code ec);
    system_error(int ev, const error_category& ecat, const string& what_arg);
    system_error(int ev, const error_category& ecat, const char* what_arg);
    system_error(int ev, const error_category& ecat);
    const error_code& code() const noexcept;
    const char* what() const noexcept override;
};

template<class ErrorCodeEnum>
error_code::error_code(ErrorCodeEnum e) noexcept {}

}