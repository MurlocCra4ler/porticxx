#pragma once

#include <bits/memory/shared_pointer.hpp>
#include <type_traits>
#include <bits/memory/allocators.hpp>

namespace std {

template<class T>
typename std::enable_if<std::is_object<T>::value, T*>::type addressof(T& arg) noexcept {
    return reinterpret_cast<T*>(
               &const_cast<char&>(
                   reinterpret_cast<const volatile char&>(arg)));
}
 
template<class T>
typename std::enable_if<!std::is_object<T>::value, T*>::type addressof(T& arg) noexcept {
    return &arg;
}

}
