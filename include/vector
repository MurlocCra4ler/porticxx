#pragma once

#include <iterator>
#include <bits/memory/allocators.hpp>

namespace std {

template<class T, class Allocator = std::allocator<T>>
class vector {
public:
    using value_type                = T;
    using allocator_type            = Allocator;
    using pointer                   = typename allocator_traits<Allocator>::pointer;
    using const_pointer             = typename allocator_traits<Allocator>::const_pointer;
    using reference                 = value_type&;
    using const_reference           = const value_type&;
    using iterator                  = value_type*;
    using const_iterator            = const value_type*;
    using reverse_iterator          = std::reverse_iterator<iterator>;
    using const_reverse_iterator    = std::reverse_iterator<const_iterator>;

    const_iterator begin() const;
    const_iterator end() const;

    const_reverse_iterator rbegin() const;
    const_reverse_iterator rend() const;

    constexpr const_iterator cbegin() const noexcept;
    constexpr const_iterator cend() const noexcept;

    // element access
    constexpr reference front();

    // modifiers
    template<class... Args>
    constexpr reference emplace_back(Args&&... args);
    constexpr void push_back(const T& x);
    constexpr void push_back(T&& x);

    constexpr void clear() noexcept;

private:
    T* m_data = nullptr;
    size_t m_size = 0;
};

}
