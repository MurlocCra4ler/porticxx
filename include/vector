#pragma once

#include <algorithm>
#include <iterator>
#include <bits/memory/allocators.hpp>
#include <utility>

namespace std {

template<class T, class Allocator = std::allocator<T>>
class vector {
public:
    using value_type                = T;
    using allocator_type            = Allocator;
    using pointer                   = typename allocator_traits<Allocator>::pointer;
    using const_pointer             = typename allocator_traits<Allocator>::const_pointer;
    using reference                 = value_type&;
    using const_reference           = const value_type&;
    using size_type                 = size_t;
    using iterator                  = value_type*;
    using const_iterator            = const value_type*;
    using reverse_iterator          = std::reverse_iterator<iterator>;
    using const_reverse_iterator    = std::reverse_iterator<const_iterator>;

    const_iterator begin() const { return data_; }
    const_iterator end() const { return data_ + size_; }

    const_reverse_iterator rbegin() const;
    const_reverse_iterator rend() const;

    constexpr const_iterator cbegin() const noexcept;
    constexpr const_iterator cend() const noexcept;

    // capacity
    constexpr bool empty() const noexcept { return size_ == 0; }
    constexpr size_type size() const noexcept { return size_; }
    constexpr size_type max_size() const noexcept;
    constexpr size_type capacity() const noexcept { return capacity_; }
    constexpr void resize(size_type sz);
    constexpr void resize(size_type sz, const T& c);
    constexpr void reserve(size_type n);
    constexpr void shrink_to_fit();

    // element access
    constexpr reference operator[](size_type n) { return data_[n]; }
    constexpr const_reference operator[](size_type n) const { return data_[n]; }
    constexpr reference front();

    // modifiers
    template<class... Args>
    constexpr reference emplace_back(Args&&... args) {
        if (capacity_ == size_) {
            size_t new_capacity = capacity_ ? capacity_ * 2 : 1;
            T* ptr = allocator.allocate(new_capacity);

            for (size_t i = 0; i < size_; ++i)
                new(ptr + i) T(std::move_if_noexcept(data_[i]));

            for (size_t i = 0; i < size_; ++i)
                data_[i].~T();

            allocator.deallocate(data_, capacity_);
            
            data_ = ptr;
            capacity_ = new_capacity;
        }

        new (data_ + size_) T(std::forward<Args>(args)...);
        ++size_;
        return data_[size_ - 1];
    }
    
    constexpr void push_back(const T& x) {
        if (capacity_ == size_) {
            size_t new_capacity = capacity_ ? capacity_ * 2 : 1;
            T* ptr = allocator.allocate(new_capacity);

            for (size_t i = 0; i < size_; ++i)
                new(ptr + i) T(std::move_if_noexcept(data_[i]));

            for (size_t i = 0; i < size_; ++i)
                data_[i].~T();

            allocator.deallocate(data_, capacity_);
            
            data_ = ptr;
            capacity_ = new_capacity;
        }

        data_[size_++] = x;
    }

    constexpr void push_back(T&& x) {
        if (capacity_ == size_) {
            size_t new_capacity = capacity_ ? capacity_ * 2 : 1;
            T* ptr = allocator.allocate(new_capacity);

            for (size_t i = 0; i < size_; ++i)
                new(ptr + i) T(std::move_if_noexcept(data_[i]));

            for (size_t i = 0; i < size_; ++i)
                data_[i].~T();

            allocator.deallocate(data_, capacity_);
            
            data_ = ptr;
            capacity_ = new_capacity;
        }

        data_[size_++] = std::move(x);
    }

    constexpr void clear() noexcept;

private:
    allocator_type allocator;

    T* data_ = nullptr;
    size_t size_ = 0;
    size_t capacity_ = 0;
};

}
